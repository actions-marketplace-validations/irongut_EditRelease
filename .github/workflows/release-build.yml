name: Build + Deploy to GHCR

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Test Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .Net
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Restore Dependencies
      run: dotnet restore src/EditRelease.sln

    - name: Build EditRelease
      run: dotnet build src/EditRelease.sln --configuration Release --no-restore

  deploy:
    name: Deploy to GHCR
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write   # Used for identity challenge with sigstore/fulcio

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.4.1
        with:
          cosign-release: 'v1.9.0'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2.0.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build + Push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the Docker image digest
      # Uses the identity token to provision an ephemeral certificate against the community Fulcio instance
      # https://github.com/sigstore/cosign
      - name: Sign the Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
